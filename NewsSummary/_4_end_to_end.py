# -*- coding: utf-8 -*-
"""
Created on Fri Nov 22 23:42:39 2019

@author: yihua
"""

from SIF import *
from _1_data_ETL import get_stopwords, wash_and_split

'''
需求：
    输入：Content，Title
    输出：Summary

方法：

1. 对Title和Content仅分词（具体做法是先wash_and_split分词分句然后join），然后分别计算向量Vtitle，Vdoc（各1x200维）

2. 对Content分词分句(wash_and_split)，然后计算出每一句话的向量Vsentence(i)
            
3. 把2处理成相似度表(与全文的相似度)，并做KNN平滑

4. 取 Top_N 作为摘要
    
封装函数: getAbstract()
'''

'''
端到端模型版本：

版本v1.2 - 2019.12.05
- 修复了省略号"…"会被当成一句话导致占用一句话的额度的问题（wash_and_split函数，直接在return时去掉了孤立省略号["…"]）
- 在Top_N中加入了abstract长度自适应函数：count_sentence(x)

版本v1.1 - 2019.12.04
- 模型中加入了标题的影响，具体来讲，Similarity_i = w1 * sim(Vi, Vtitle) + w2 * sim(Vi, Vcontent)
- cosine similarity 现在从【-1，1】标准化到【0，1】空间了
- 修复了 get_similarity_lookup_table 函数中滑窗只能为3的bug
- 在封装函数中增加了debug模式，可以同时输出所有句子的相似度表(句子原文，平滑前相似度，平滑后相似度)

版本v1.0 - 2019.12.03
- 初步版本，完善基本功能
'''


def SIF_as_whole_sen(doc, model, a: float=1e-3, unlisted_word_freq=0.0001, skip_mode=False):
    '''
    给定一篇文章/标题，把所有的句子连一起当成一个长句，
    返回：这个长句的句向量（1，200）
    
    注：如果输入为空，则会返回零向量1x200
    '''
    doc_splitted = []
    for i in wash_and_split(doc):
        doc_splitted.extend(i)
    return SIF([doc_splitted], model, a, unlisted_word_freq, skip_mode)

def get_Vsentence_lookup_table(content, model, a: float=1e-3, unlisted_word_freq=0.0001, skip_mode=False):
    """
    因为最后需要计算相似度，并进行排序并取出句子，所以这里要构建一个句子-句向量的对应表
    这里使用元组的列表，例：
    [
        (['根据', '世界卫生组织', '今年初', '发布', '的', '2019', '年', '面临', '的', '十大', '健康', '威胁', '，', '艾滋病毒', '位列', '当中', '。'], 
        array([-0.15216898,  0.15154545, -0.01384243, -0.17174808,  0.01216422,
           -0.15807016,  0.09030649, -0.12126859,  0.07704246,  0.0142473 ,..., -0.0776185 ])),
        (['数据', '显示', '，', '中国', '报告', '存活', '艾滋病', '感染者', '已经', '超过', '95', '万人', '，', '虽然', '整体', '疫情', '处于', '低', '流行', '水平', '，', '但', '近年来', '青年', '人群', '60', '岁', '及', '以上', '老年人', '群', '病毒感染者', '及', '病人', '报告', '数', '呈', '增多', '趋势', '，', '引起', '社会', '关注', '。'], 
        array([-2.42530459e-01,  1.73977234e-01,  7.28325099e-02, -1.23121120e-01,
            9.52187520e-02,  1.43645321e-03,  7.27372654e-02, -6.12526976e-02,
            8.45073764e-02, -1.10267936e-01, -7.16191889e-03, -9.67851032e-02,...,  3.80308447e-04]))
    ]
    
    """
    content = wash_and_split(content)
    V_sentences= SIF(content, model, a, unlisted_word_freq, skip_mode)
    return [(sent, vec) for sent, vec in zip(content, V_sentences)]

def get_similarity_lookup_table(Vsentence_lookup_table, V_content, V_title, W_content, W_title, knn_n, knn_weights, similarity_function):
    '''
    Input: 
        Vsentences_lookup_table：每句话的句向量，查询表的形式
        V_content：文章当作长句的句向量
        V_title：标题当作长句的句向量
        similarity : 相似度函数，可取 cosine / l1 / l2 / linf
        knn_n : 左右多少个平滑，(left, right)
        knn_weights : 权重表
    Output:
        similarity_lookup_table：句子与文章的相似度值组成的向量，查询表的形式

        
    # To do：把标题的向量也用上，现在暂时没在用（版本v1.1 已完成）
        
    关于不同相似度函数的区别，参考：
    https://blog.csdn.net/linvo/article/details/9333019?utm_source=tuicool&utm_medium=referral#
    面试说不定会问噢
    '''

    '''
    计算相似度的函数，会从中选一个
    '''
    calculate_similarity = lambda x, y: {
            "cosine": (np.dot(x.reshape(-1), y.reshape(-1))/(np.linalg.norm(x.reshape(-1)) * np.linalg.norm(y.reshape(-1))) + 1)/2, 
            "l1": np.linalg.norm(x-y, ord=1),
            "l2": np.linalg.norm(x-y, ord=2),
            "linf": np.linalg.norm(x-y, ord=np.inf),
            }.get(similarity_function)
    
    '''
    table中对应 (句子，相似度)
    至此相似度计算好了，后面开始KNN平滑
    '''
    if V_title.sum() == 0:
        similarity_lookup_table = [(sent, calculate_similarity(Vsent, V_content)) for sent, Vsent in Vsentence_lookup_table]
    elif V_title.sum() != 0:
        similarity_lookup_table = [(sent, W_content * calculate_similarity(Vsent, V_content) + W_title * calculate_similarity(Vsent, V_title)) for sent, Vsent in Vsentence_lookup_table]
    
    '''
    KNN平滑
    '''
    assert sum(knn_n)+1 == len(knn_weights)
    
    knn_weights = np.array(knn_weights)
    temp_ = np.array([0]*knn_n[0] + [i[1] for i in similarity_lookup_table] + [0]*knn_n[1])
    smoothed = []
    for i in range(len(temp_)-sum(knn_n)):
        smoothed.append(np.dot(knn_weights, temp_[i:i+sum(knn_n)+1]))
        
    assert len(smoothed) == len(similarity_lookup_table)
        
    similarity_lookup_table_smoothed = [(i[0], j) for i, j in zip(similarity_lookup_table, smoothed)]
    
    return similarity_lookup_table_smoothed


def top_N(similarity_lookup_table_smoothed, top_n = 5, remain_sentence_order = True):
    '''
    先对原序列增加一个序号值，后面如果要还原句子顺序，就对序号值重新排序即可
    '''
    x = [(sent, sim, i) for (sent, sim), i in zip(similarity_lookup_table_smoothed, range(1, len(similarity_lookup_table_smoothed)+1))]
    x.sort(key=lambda a: a[1], reverse = True)
    if top_n == 'auto': 
        x = x[:count_sentence(len(x))]
    else: 
        x = x[:top_n]
    
    if remain_sentence_order == True:
        x.sort(key=lambda a: a[2])
    return "".join(["".join(i[0]) for i in x])


def count_sentence(x):
    '''
    输入文章长度 - 输出摘要长度 的 映射函数
    '''
    if x <= 20:
        top_n=3
    elif x > 20 and x < 35:
        top_n=5
    elif x >= 35 and x < 50:
        top_n = 8
    else:
        top_n = 10
    return top_n




"""
******** 最后，封装函数 ********
"""

params = {
        "stopwords": get_stopwords(path='content/stopwords.txt', punctuations=True, bookmarks=False, text_stopwords=True),
        "word2vec_": word2vec.Word2Vec.load('model/word2vec_v1.0.model'),
        "a": 1e-3,
        "unlisted_word_freq": 0.0001,
        "knn_n": (1, 1),
        "knn_weights": [1/3, 1/3, 1/3],
        "similarity_function": "l2",       # 可取：l1，l2，linf，cosine
        "top_n": "auto",               # 可取int，也可以取"auto"
        "skip_mode": False,
        "remain_sentence_order": True,
        "W_content": 0.5,
        "W_title": 0.5
  }

def getAbstract(content="", title="", params = params, debug=False):
    '''
    params中的参数：
    stopwords: a list of stopwords,
    word2vec_: word2vec model <gensim.word2vec.Word2vec>, 
    a: a, 
    unlisted_word_freq: 未登录词的词频, 
    knn_n: knn平滑的n取值,
    knn_weights: knn平滑的weights, 
    similarity_function: 相似度函数选取，可选l1,l2,linf,cosine
    top_n: 取前n句话作为摘要,
    skip_mode: 未登录词是否跳过, 
    remain_sentence_order：取top_N后是否保留原来的句子排序
    '''


    '''
    1. 计算V_title和V_doc，各 1x200 维
    '''
    V_title = SIF_as_whole_sen(title, model = params["word2vec_"], a = params['a'], unlisted_word_freq = params['unlisted_word_freq'], skip_mode = params['skip_mode'])
    V_doc = SIF_as_whole_sen(content, model = params["word2vec_"], a = params['a'], unlisted_word_freq = params['unlisted_word_freq'], skip_mode = params['skip_mode'])
    '''
    2. 计算V_sentences查询表，句子和向量一一对应，每个句向量都为 200 维
    '''
    Vsentence_lookup_table = get_Vsentence_lookup_table(content, model = params["word2vec_"], a = params['a'], unlisted_word_freq = params['unlisted_word_freq'], skip_mode = params['skip_mode'])
    '''
    3. 计算V相似度查表，句子和相似度一一对应，
    '''
    sim_table_smoothed = get_similarity_lookup_table(Vsentence_lookup_table, V_doc, V_title, W_content = params["W_content"], W_title = params["W_title"], knn_n = params["knn_n"], knn_weights = params["knn_weights"], similarity_function = params["similarity_function"])
    '''
    4. get Top_N
    '''
    result = top_N(sim_table_smoothed, top_n = params["top_n"], remain_sentence_order = params["remain_sentence_order"])
    if debug==True: return result, get_similarity_lookup_table(Vsentence_lookup_table, V_doc, V_title, W_content = params["W_content"], W_title = params["W_title"], knn_n = (0,0), knn_weights = [1], similarity_function = params["similarity_function"]), sim_table_smoothed
    return result

if __name__ == "__main__":
    sample_text = '\n    根据世界卫生组织今年初发布的2019年面临的十大健康威胁，艾滋病毒位列当中。\n\n\u3000\u3000数据显示，中国报告存活艾滋病感染者已经超过95万人，虽然整体疫情处于低流行水平，但近年来青年人群、60岁及以上老年人群病毒感染者及病人报告数呈增多趋势，引起社会关注。\n\n\u3000\u3000全国报告存活艾滋病感染者95.8万。\n\n\u3000\u3000世界艾滋病日前夕，国家卫健委疾病预防控制局公布了一组最新数据。\n\n\u3000\u3000来自官方的数据显示，截至2019年10月底，全国报告存活艾滋病感染者95.8万，整体疫情持续处于低流行水平。\n\n\u3000\u3000这其中，2019年1—10月，全国共检测2.3亿人次，新报告发现感染者13.1万例，新增加抗病毒治疗12.7万例，全国符合治疗条件的感染者接受抗病毒治疗比例为86.6%，治疗成功率为93.5%。\n\n\u3000\u3000与此同时，目前，艾滋病经输血传播基本阻断，经静脉吸毒传播和母婴传播得到有效控制，性传播成为主要传播途径。\n\n\u3000\u30002019年1—10月新报告感染者中，异性性传播占73.7%，男性同性性传播占23.0%。\n\n\u3000\u3000新增艾滋病感染者呈“两头翘”趋势\n\n\u3000\u3000尽管整体疫情持续处于低流行水平， 但值得注意的是，近年来新增艾滋病感染者的情况呈“两头翘”趋势。所谓“两头”即学生和老年人。\n\n\u3000\u3000根据中国疾控中心今年7月底透露的数据，中国15到24岁之间的青年学生近年每年报告发现艾滋病病例在3000例上下。\n\n\u3000\u3000观察各地近期报告的数据，男男性行为成学生群体中的主要传播途径。\n\n\u3000\u3000例如，日前湖北省疾控中心透露的数据显示，2019年1-10月新报告学生感染者全部是经性途径传播感染，同性传播、异性传播所占比例分别为91.3%和8.7%。\n\n\u3000\u3000陕西省疾控中心近期公布的数据显示，全省每年新报告学生感染数在100例以上，平均每20名艾滋病患者中就有1名是学生。学生感染艾滋病主要传播方式是男男同性性行为传播，所占的比例已经超过70%。\n\n\u3000\u3000另一个感染人数上升的群体则是老年人。\n\n\u3000\u3000中国疾控中心流行病学首席专家吴尊友此前就表示，老年感染者的上升幅度远远超过了老年人口的上升幅度。\n\n\u3000\u3000数据显示，近年来，中国的老年人群，特别是60岁以上的男性人群感染的病例报告数，从2012年的8391例上升到2018年的24465例。\n\n\u3000\u300060岁以上老年男性感染艾滋病主要由不良性行为所致。一些专家分析指出，随着健康水平提升，人均寿命提高，老年人的精神文化生活和生理需求应受到关注，有针对性的健康教育和法制宣传亟待加强。\n\n\u3000\u3000仍有约四分之一感染者未检测或不知晓\n\n\u3000\u3000除了呈现“两头翘”趋势，目前艾滋病防控面临的另一个挑战是，一些群体中的检测的比例仍然较低。\n\n\u3000\u3000国家卫生健康委疾控局副局长周宇辉在日前举行的2019年世界艾滋病日主题宣传活动上强调，当前社交软件等新媒体的普遍使用，增强了易感染艾滋病行为的隐蔽性，人口频繁流动增加了预防干预的难度。\n\n\u3000\u3000让人担忧的是，目前全国尚有约四分之一的感染者没有检测或不知晓自身感染状况，已发现感染者中晚发现比例较高，大众对艾滋病防治知识的知晓程度还有待提高，青年学生和老年人自我防护措施仍待加强。\n\n\u3000\u3000中国科学院院士、解放军总医院第五医学中心原感染性疾病诊疗与研究中心主任王福生也认为，目前青年群体的主观认识和客观事实仍存在偏差，特别是是青年学生HIV检测比例不高。\n\n\u3000\u3000他分析称，行为监测数据显示，青年学生中做过HIV检测的比例，远远低于该人群自我报告的发生过性行为的比例。\n\n\u3000\u30002030年全人群感染率控制在0.2%以下\n\n\u3000\u3000事实上，近年来，在艾滋病防治领域国家已经密集出台政策，控制感染率、药物研发、保障药品供应等均有涉及。\n\n\u3000\u3000今年7月公布的《健康中国行动(2019—2030年)》中就明确提出了相关行动目标，即到2022年和2030年，艾滋病全人群感染率分别控制在0.15%以下和0.2%以下。\n\n\u3000\u3000国家卫生健康委等10部门今年还联合印发了《遏制艾滋病传播实施方案(2019—2022年)》。\n\n\u3000\u3000针对青年学生和老年人群体，文件中明确要求加强老年人宣传教育，使老年人艾滋病防治知识知晓率达90%以上；同时，加强普通中学、中等职业学校的性健康和预防艾滋病教育，使青年学生艾滋病防治知识知晓率达95%以上。\n\n\u3000\u3000在药品研发方面，《“十三五”国家药品安全规划》也明确提出，对具有明显临床价值的创新药及防治艾滋病、恶性肿瘤、重大传染病、罕见病等疾病的临床急需药品，实行优先审评审批。\n\n\u3000\u3000与此同时，艾滋病治疗的“中国方案”，不仅大大降低了中国患者的病死率，还成为国际范围内性价比最高的方案。\n\n\u3000\u3000目前，艾滋病毒核酸检测试剂将检测窗口期从28天缩短到7天以内。据中国疾控中心相关负责人介绍，过去十几年中，中国诊断率从2005年的21%上升到2018年的69%，病毒抑制率从2011年的85%上升到2018年的94%。\n\n\u3000\u3000但也正如官方所强调，如今，中国艾滋病疫情分布不平衡，波及范围广泛，影响因素复杂多样，防治形势仍然严峻，防治任务更加艰巨。\n\n\u3000\u3000面对这一人类社会最关注的疾病，未来的防治工作，仍任重而道远。\n    '
    sample_text2 = """

    12月1日，华为CFO孟晚舟在加拿大温哥华发表了一封公开信。一年前的这一天，孟晚舟在温哥华机场被加拿大警方拘押，至今未获自由。孟晚舟在信中说，这一年，经历了恐惧和痛苦，失望和无奈，煎熬和挣扎。这一年，学会了坚强承受，从容面对，不畏未知。在信中，孟晚舟还感谢大家给她的温暖和鼓励。
    
    任正非谈孟晚舟：为女儿骄傲 苦难使她变得更强大。
    
    美国有线电视网（CNN）12月1日发布了对华为创始人任正非的专访，任正非谈到，女儿孟晚舟这一年的苦难经历，使她变得更强大。
    
    “她是在受苦，但也因此变得更强大。”
    
    任正非在专访中表示，孟晚舟是在受苦，但也会因此变得更强大。“她应该为自己经历这样的苦难而感到自豪。苦难的经历对她的成长是有好处的。”
    
    任正非谈孟晚舟：为女儿骄傲 苦难使她变得更强大
    
    “这场磨难让我们更亲近了。”
    
    据任正非介绍，这一年孟晚舟大部分时间花在画画和学习上，她的妈妈和丈夫定期飞往加拿大和她一起生活。就像孟晚舟在公开信中写到的，现在，她有足够的时间去读完一本书，有足够的时间细细地完成一幅油画。
    
    这位75岁的父亲还说，这场磨难让他与女儿更亲近了。他们以前一直没有固定的联系时间，但现在父女之间聊得比以前多多了。“在过去，孟晚舟可能一整年都不给我打个电话，不会问我怎么样，甚至不会给我发短信。但现在，我们的联系密切了许多。”任正非说有时会把在网上看到的趣闻发给她。
    
    任正非谈孟晚舟：为女儿骄傲 苦难使她变得更强大
    
    “有一件事是肯定的：她不会升职。”
    
    谈及孟晚舟在华为的未来时，任正非表示，可以肯定的是：她不会升职。
    
    “这样的艰难困苦会对一个人的勇气和性格产生重大影响。然而，这并不意味着当她回到华为时就会被赋予更大的责任。”
    
    任正非说，作为首席财务官，她可以处理财务问题，但对于公司的其他业务她无法面面俱到，因为她没有技术背景，也没有领导能力。“如果公司由一个没有战略头脑的人领导，公司将逐渐失去竞争优势。这就是为什么当孟晚舟回来的时候，她会继续做她一直在做的事情。”他说。"""
    
    params.update({
        "a": 1e-3,
        "unlisted_word_freq": 0.0001,
        "knn_n": (1, 1),
        "knn_weights": [1/3, 1/3, 1/3],
        "similarity_function": "l2", 
        "skip_mode": False, 
        "W_content": 0.5, 
        "W_title": 0.5
        })
    getAbstract(sample_text2, "任正非谈孟晚舟：为女儿骄傲 苦难使人更强大", params=params)
    getAbstract(sample_text, params=params)
    
    a = getAbstract("""央广网北京2月28日消息 据中国之声《新闻和报纸摘要》报道，国务院总理李克强2月27日向第五届中德创新大会致贺信。
李克强在贺信中表示，当前新一轮科技革命和产业变革席卷全球，科技创新正深刻改变着人类的生产生活方式。中德科技创新合作开创了大国科技合作的先例，为两国务实合作装上了大功率“引擎”。
李克强指出，中国经济发展正处在新旧动能转换和结构升级的关键时期。我们将贯彻落实新发展理念，深入实施创新驱动发展战略，促进大众创业、万众创新上水平，加快建设创新型国家。希望中德双方汇集众智、增进共识，深化科技创新交流合作，推动两国经济社会健康发展，为全球经济注入新动力。
中德政府间科技合作协定签订40周年暨第五届中德创新大会27日在京举行。两国科技、企业、政府等各界300余名代表出席。""", params=params, debug=True)
    [print(i, "%.5f"%j, "\n") for i, j in list(("".join(i), j) for i, j in a[2])];


    params.update({"top_n":'auto'})
    b = getAbstract("""来源：澎湃新闻

万喆（特约评论员）

将近年末，华为又“火”了起来。但和年初的“火”似乎有所不同。

在华为工作12年的前员工李洪元离职后，被公司举报敲诈勒索，公安局将其羁押了251天，后无罪释放，其获得国家赔偿10万元。有人戏称，这个故事是出身985，工作996，离职251，投诉404。

离职而已，竟然弄到要坐牢？舆论哗然。

一份不合格的“声明”

针对惶惶民意，华为发出一份“声明”。

“华为有权利，也有义务，并基于事实对于涉嫌违法的行为向司法机关举报。……如果李洪元认为他的权益受到了损害，华为支持他运用法律武器维护自己的权益，包括起诉华为。”

这声明让我很惊诧。华为这样一家“狼性公司”，竟然允许这么low水平的公关存在？

声明中，整体利益核心和表达关键是“华为支持他运用法律武器维护自己的权益”。这句话就不是谁都能够说的。如果是进行一种宏观性的表达，只能是拥有系统性代表身份的机构或代言人才有资格说这种话。类似于“御赐”并不是谁都能用，何况还在里面胡乱用了“平身”“赐座”等等。作为一个微观个体企业，正在和市场对话，却用一种远远高于市场的自我定位开口，恐怕是非常不合适的；如果公司表达的是一种微观意思，那就是实实在在地表明要“支持”，提供资金、人员、信息等等。但华为显然并没有这个意思，而且正好相反，他们根本站在这个微观“支持”的对立面；剩下的可能，就只能有两种，一种是言不由衷，或者说着玩玩，倘若如此，则戏弄大众，是公关大忌。另一种则拿捏着一股劲儿，“让你告”，等同于威胁，不仅戏弄，且有耳光伺候。公开发表用此种态度，无论是上述哪种可能，都无异于“高级黑”。

一个公司和市场对话，也不是说应该多么谦卑，至少不能用“君临天下”的口吻。大众并不是来听你教训和教育的，你也没权利对市场做普法培训。公司声明的要点，就是把自己的事情说清楚。别人有没有违法，有没有运用法律武器的权利，要不要起诉谁等等，都不是你公司的事儿，也不在你的权力范畴内。如果你认为这些都在你权力范畴内，那么你不但是对自身定位有所误解，肯定也对社会制度有所误解。

为什么不好好表达？

而华为的声明中缺乏的，恰恰就是对自身相关问题的说明。

这不是说华为一定就是有问题的。

而且，华为不是正好可以通过声明来说明事实真相吗？

华为的权利和义务是每个守法个体的权利和义务，不必赘述。“基于事实”则是合法权利义务的最重磅注解。“事实”才应作为重点。有什么事实让华为觉得李某“涉嫌违法”？你倒是说嘛。

此件事情中，需要说清楚的恐怕还包括，第一次报案的时候是涉嫌泄密，因查无实据，两周后重新报案变成敲诈勒索。是什么事实让报案人难以分清李某错误所在以及无法决定以哪个“罪行”“举报”他呢？

当然，也不排除，虽时隔数月才“案发”，但部门领导就是分不清所掌握证据属于“泄密”还是“勒索”，那偌大公司，法务部门呢？

更关键的是，在地方公安局、检察院等部门的调查下，经历251天，发现确实没有犯罪事实，而且向李某道歉，也进行了赔偿。此时，举报人华为还在用虽然“尊重公检结果”，但自己“有权利，也有义务，并基于事实对于涉嫌违法的行为向司法机关举报”。是信服法律裁定结果还是不信服？信服，则应同样道歉。不信服，既然华为一向自信“有权利，也有义务，并基于事实对于涉嫌违法的行为向司法机关举报”，就应该坚守信念，继续向上一级执法、司法机关表达自己的权利和义务嘛。

而据称，当当事人拿出录音证据，部门相关“证人”竟然也改了口供。这究竟是事前私权力膨胀证词有假还是事后在公权力面前不敢说真话？

“事实”的面目不能在这种大而无当的语气中刻意被模糊掉。

当然，有人说，华为才不屑于向大众说明情况呢。傲娇？可以有。但这么傲娇，还发什么声明呢？华为既然对大众发声明，就有权利也有义务把话说清楚。尤其不能明明是自己说明不清楚话，却又用“懒得跟你说”来掩饰。

我完全同意华为用法律捍卫自己的权利，我也不觉得华为必须去同情其认为违法违规的员工。我的问题是，整个事件中，无论真相如何，无论是李某或其部门领导有问题，可以见到华为内部管理的混乱。而因为这混乱，侵占了公共资源，甚至可能过度或过分“使用”了公权力系统资源。华为是不是应该自查和反思？

边点赞边忧虑

事实上，我们还是要为这桩“案件”中的深圳相关公安局和检察院点赞。他们能够实事求是办案，且能够诚恳承认错误，应属于社会进步中的重要一环。

不过，网络上有消息称，华为员工离职而被举报至关押的并不只是李某一个。

这倒并不稀奇。因为华为员工据称近20万人，也算是个“巨无霸”。虽然都是“985”，也天天“996”，但其中是不是各有私心甚至有些“坏人”，的确不好说。如果有人犯罪，受到法律制裁也是应有之义。

但如果屡屡出现这种“冤假错案”，而且过程如此类似，则不得不让人担忧。

实际上，大公司拥有完备的法务队伍、有丰厚的资金、更不要说可能还有强大的各种资源及背景，个人与之相对，轻若鸿毛。

前几年已经爆出，华为身患绝症的博士被“扫地出门”，奉献一生，得病后变得衣食无着。近期又有网易员工生病后被裁。真正鸿毛不如。

这个时候，相关的行政仲裁、司法程序有没有相应的保障呢？

大公司“有权利”让公权力“抓人”也不新鲜。“鸿茅药酒”为了一个没几个人看过的网络文章，就能够让当地公安局“千里追凶”，关押时间也是相当的长。迄今可有道歉？

往远了说，如今大名鼎鼎的孙宏斌，当年在联想因年少轻狂而有牢狱之灾，出来后对老领导恭恭敬敬，一番努力，事业有成不说，原来的罪名也被撤销。这一立一撤，于私人，号称被传为“佳话”，于公权部门，究竟是有错就改还是将错就错，于大众，究竟是笑话还是悲剧？

我们必须承认，在“依法治国”的大前提下，法治水平有了长足的进步。但有些领域仍然存在无法可依、有法但可操作性不强，甚至违法成本低、守法成本高等问题。在执法过程中，也存在着较大的自由把控权，且受监督力度仍然小。

这种情势下，公权力会不会成为一些私权力的“抓手”，来“治”那些“不听话”的对立面？值得警惕和思考。

没有公平对待，难言正义声张

有人说，李某就不是个好人，他拿着录音笔跟公司谈事儿。

李某是不是好人我不知道，但是这录音笔救了他一命。有了录音笔，证人改了口供，有了录音笔，他“只”蹲了251天号子，有了录音笔，他才能听见华为说“有本事你告我啊”。

这世上本没有录音笔，说假话的人多了，就有了录音笔。

有人说，华为原来看起来浓眉大眼，其实是个坏人。

华为是不是“坏”也不好说。想要破坏华为、挖华为墙脚、泄露商业机密、敲诈勒索的人肯定也不少，华为也绝对不是靠“一片冰心在玉壶”才活到今天的。

这世上本没有华为，奋不顾身往前冲，才有了华为。

那问题在哪儿呢？

问题在这儿。

试问，如果是李某或其他普通个人举报华为的违法行为，执法机关会不会这么迅速进行拘捕，然后发现查无实据，接着任举报人重新举报其他罪名，然后继续羁押，接着接近四个月当事人才见到检察官知道罪名交上证据，然后继续羁押，接着证人改口，然后继续羁押。

如果答案是不会，那就正是大众担忧的原因。而且，这种不够公平公正的方式，对华为就一定是好事吗？莫说现在舆论的矛头已经对准了华为。华为会不会遇到更能够“调配”公权力的对手呢？我们不能只靠舆论场上对强弱势的偏袒来弥补公平系统中对强弱势的不公。

法治的公平，是社会良性发展的基石。""", title="在华为工作12年的前员工李洪元离职后，被公司举报敲诈勒索", params=params)